
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.23 (git sha1 7ce5011c24b)


-- Executing script file `synth.ys' --

1. Executing Verilog-2005 frontend: bsnn_mac.v
Parsing SystemVerilog input from `bsnn_mac.v' to AST representation.
Generating RTLIL representation for module `\bsnn_mac'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: bsnn_layer.v
Parsing SystemVerilog input from `bsnn_layer.v' to AST representation.
Generating RTLIL representation for module `\bsnn_layer'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: bsnn_stack.v
Parsing SystemVerilog input from `bsnn_stack.v' to AST representation.
Generating RTLIL representation for module `\bsnn_stack'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: bsnn_stack_parametric.v
Parsing SystemVerilog input from `bsnn_stack_parametric.v' to AST representation.
Generating RTLIL representation for module `\bsnn_stack_parametric'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: bsnn_stream_wrapper.v
Parsing SystemVerilog input from `bsnn_stream_wrapper.v' to AST representation.
Generating RTLIL representation for module `\bsnn_stream_wrapper_fifo'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: bsnn_top.v
Parsing SystemVerilog input from `bsnn_top.v' to AST representation.
Generating RTLIL representation for module `\bsnn_top'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: bsnn_addmm_top.v
Parsing SystemVerilog input from `bsnn_addmm_top.v' to AST representation.
Generating RTLIL representation for module `\bsnn_addmm_top'.
Successfully finished Verilog frontend.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \bsnn_top
Used module:     \bsnn_stream_wrapper_fifo

8.2. Analyzing design hierarchy..
Top module:  \bsnn_top
Used module:     \bsnn_stream_wrapper_fifo
Removing unused module `\bsnn_addmm_top'.
Removing unused module `\bsnn_stack_parametric'.
Removing unused module `\bsnn_stack'.
Removing unused module `\bsnn_layer'.
Removing unused module `\bsnn_mac'.
Removed 5 unused modules.

9. Executing PROC pass (convert processes to netlists).

9.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$bsnn_stream_wrapper.v:99$1075 in module bsnn_stream_wrapper_fifo.
Marked 1 switch rules as full_case in process $proc$bsnn_stream_wrapper.v:86$1067 in module bsnn_stream_wrapper_fifo.
Marked 2 switch rules as full_case in process $proc$bsnn_stream_wrapper.v:60$1055 in module bsnn_stream_wrapper_fifo.
Removed 1 dead cases from process $proc$bsnn_stream_wrapper.v:0$1043 in module bsnn_stream_wrapper_fifo.
Marked 1 switch rules as full_case in process $proc$bsnn_stream_wrapper.v:0$1043 in module bsnn_stream_wrapper_fifo.
Marked 1 switch rules as full_case in process $proc$bsnn_stream_wrapper.v:40$1042 in module bsnn_stream_wrapper_fifo.
Removed a total of 1 dead cases.

9.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

9.4. Executing PROC_INIT pass (extract init attributes).

9.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:99$1075'.
Found async reset \rst in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
Found async reset \rst in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:40$1042'.

9.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~10 debug messages>

9.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:99$1075'.
     1/1: $0\valid_pipeline[23:0]
Creating decoders for process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:86$1067'.
     1/2: $0\input_vector[255:0]
     2/2: $0\weight_input[255:0]
Creating decoders for process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
     1/4: $0\out_word_idx[2:0]
     2/4: $0\layer_idx[4:0]
     3/4: $0\byte_count[2:0]
     4/4: $0\load_idx[7:0]
Creating decoders for process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:0$1043'.
     1/1: $1\next_state[1:0]
Creating decoders for process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:40$1042'.
     1/1: $0\state[1:0]

9.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\bsnn_stream_wrapper_fifo.\next_state' from process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:0$1043'.

9.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\bsnn_stream_wrapper_fifo.\valid_pipeline' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:99$1075'.
  created $adff cell `$procdff$1127' with positive edge clock and positive level reset.
Creating register for signal `\bsnn_stream_wrapper_fifo.\weight_input' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:86$1067'.
  created $dff cell `$procdff$1128' with positive edge clock.
Creating register for signal `\bsnn_stream_wrapper_fifo.\input_vector' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:86$1067'.
  created $dff cell `$procdff$1129' with positive edge clock.
Creating register for signal `\bsnn_stream_wrapper_fifo.\load_idx' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
  created $adff cell `$procdff$1130' with positive edge clock and positive level reset.
Creating register for signal `\bsnn_stream_wrapper_fifo.\byte_count' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
  created $adff cell `$procdff$1131' with positive edge clock and positive level reset.
Creating register for signal `\bsnn_stream_wrapper_fifo.\layer_idx' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
  created $adff cell `$procdff$1132' with positive edge clock and positive level reset.
Creating register for signal `\bsnn_stream_wrapper_fifo.\out_word_idx' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
  created $adff cell `$procdff$1133' with positive edge clock and positive level reset.
Creating register for signal `\bsnn_stream_wrapper_fifo.\state' using process `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:40$1042'.
  created $adff cell `$procdff$1134' with positive edge clock and positive level reset.

9.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

9.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:99$1075'.
Removing empty process `bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:99$1075'.
Found and cleaned up 3 empty switches in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:86$1067'.
Removing empty process `bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:86$1067'.
Found and cleaned up 5 empty switches in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
Removing empty process `bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:60$1055'.
Found and cleaned up 1 empty switch in `\bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:0$1043'.
Removing empty process `bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:0$1043'.
Removing empty process `bsnn_stream_wrapper_fifo.$proc$bsnn_stream_wrapper.v:40$1042'.
Cleaned up 10 empty switches.

9.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.
Optimizing module bsnn_stream_wrapper_fifo.
<suppressed ~5 debug messages>

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.
Optimizing module bsnn_stream_wrapper_fifo.
<suppressed ~2 debug messages>

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Finding identical cells in module `\bsnn_stream_wrapper_fifo'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bsnn_stream_wrapper_fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
  Optimizing cells in module \bsnn_stream_wrapper_fifo.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Finding identical cells in module `\bsnn_stream_wrapper_fifo'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1128 ($dff) from module bsnn_stream_wrapper_fifo (D = { \weight_input [223:0] \data_in }, Q = \weight_input).
Adding EN signal on $procdff$1129 ($dff) from module bsnn_stream_wrapper_fifo (D = { \input_vector [223:0] \data_in }, Q = \input_vector).
Adding EN signal on $procdff$1130 ($adff) from module bsnn_stream_wrapper_fifo (D = $procmux$1116_Y, Q = \load_idx).
Adding EN signal on $procdff$1131 ($adff) from module bsnn_stream_wrapper_fifo (D = $procmux$1112_Y, Q = \byte_count).
Adding EN signal on $procdff$1132 ($adff) from module bsnn_stream_wrapper_fifo (D = $add$bsnn_stream_wrapper.v:74$1062_Y [4:0], Q = \layer_idx).
Adding EN signal on $procdff$1133 ($adff) from module bsnn_stream_wrapper_fifo (D = $procmux$1104_Y, Q = \out_word_idx).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..
Finding unused cells or wires in module \bsnn_stream_wrapper_fifo..
Removed 11 unused cells and 59 unused wires.
<suppressed ~15 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_stream_wrapper_fifo.
<suppressed ~1 debug messages>
Optimizing module bsnn_top.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_stream_wrapper_fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_stream_wrapper_fifo.
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_stream_wrapper_fifo'.
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_stream_wrapper_fifo..
Finding unused cells or wires in module \bsnn_top..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_stream_wrapper_fifo.
Optimizing module bsnn_top.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing FLATTEN pass (flatten design).
Deleting now unused module bsnn_stream_wrapper_fifo.
<suppressed ~1 debug messages>

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~6 debug messages>

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

12.13. Executing OPT_DFF pass (perform DFF optimizations).

12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..

12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

12.16. Finished OPT passes. (There is nothing left to do.)

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$068ad458e7761d78e5eed8238508872e7b0aef95\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dffe.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $adffe.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using template $paramod$b0777dc865134c8525a4aa84de8cfa938974cad1\_90_alu for cells of type $alu.
Using template $paramod$076c9a7a3f037230073fe14dd4865d470cb48917\_90_alu for cells of type $alu.
Using template $paramod$91f82ead1edc61e0a1452110f15ef747116b421b\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~981 debug messages>

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.
<suppressed ~1272 debug messages>

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..
Removed 6 unused cells and 607 unused wires.
<suppressed ~7 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `\bsnn_top' to `<abc-temp-dir>/input.blif'..
Extracted 121 gates and 147 wires to a netlist network with 24 inputs and 30 outputs.

15.1.1. Executing ABC.
Running ABC command: "berkeley-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               MUX cells:        1
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               XOR cells:       14
ABC RESULTS:              NAND cells:        6
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               AND cells:       23
ABC RESULTS:        internal signals:       93
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       30
Removing temp directory.

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

16.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..
Removed 0 unused cells and 107 unused wires.
<suppressed ~1 debug messages>

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

16.9. Rerunning OPT passes. (Maybe there is more to do..)

16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsnn_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsnn_top.
Performed a total of 0 changes.

16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsnn_top'.
Removed a total of 0 cells.

16.13. Executing OPT_DFF pass (perform DFF optimizations).

16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsnn_top..

16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsnn_top.

16.16. Finished OPT passes. (There is nothing left to do.)

17. Printing statistics.

=== bsnn_top ===

   Number of wires:                 76
   Number of wire bits:           1546
   Number of public wires:          29
   Number of public wire bits:    1437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                614
     $_ANDNOT_                       6
     $_AND_                         22
     $_DFFE_PP0P_                   19
     $_DFFE_PP_                    512
     $_DFF_PP0_                     26
     $_MUX_                          1
     $_NAND_                         6
     $_NOT_                          4
     $_ORNOT_                        2
     $_XNOR_                         1
     $_XOR_                         14
     bsnn_stack_static               1

   Estimated number of transistors:        404+

18. Executing Verilog backend.

18.1. Executing BMUXMAP pass.

18.2. Executing DEMUXMAP pass.
Dumping module `\bsnn_top'.

19. Executing JSON backend.

End of script. Logfile hash: f25f377bec, CPU: user 0.38s system 0.02s, MEM: 20.86 MB peak
Yosys 0.23 (git sha1 7ce5011c24b)
Time spent: 25% 1x abc (0 sec), 14% 15x read_verilog (0 sec), ...
